CREATE SCHEMA IF NOT EXISTS my_social_media;

SET search_path TO my_social_media;

DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS post CASCADE;
DROP TABLE IF EXISTS comment CASCADE;
DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS situations CASCADE;
DROP TABLE IF EXISTS friendships CASCADE;

DROP TYPE IF EXISTS visibility;

create type visibility as enum (
    'PUBLIC',
    'PRIVATE' 
);

CREATE TABLE users(
    id              INTEGER       GENERATED BY DEFAULT AS IDENTITY NOT NULL, 
    name            VARCHAR       NOT NULL,
    email           VARCHAR       NOT NULL,
    nickname        VARCHAR,
    birth_date      TIMESTAMP     WITH TIME ZONE NOT NULL,
    cep             VARCHAR       NOT NULL,
    password        VARCHAR       NOT NULL,
    photo           VARCHAR 
);
ALTER TABLE users ADD CONSTRAINT pk_users PRIMARY KEY (id);
ALTER TABLE users ADD CONSTRAINT uk_users_email UNIQUE (email);


CREATE TABLE post(
    id              INTEGER       GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    owner_id        INTEGER,
    image           VARCHAR       NOT NULL,
    message         VARCHAR       NOT NULL,
    privacy         visibility    NOT NULL,
    crated_at       TIMESTAMP     WITH TIME ZONE 
);
ALTER TABLE post ADD CONSTRAINT pk_post PRIMARY KEY (id);
ALTER TABLE post ADD CONSTRAINT fk_post_users_id FOREIGN KEY (id) REFERENCES users;


CREATE TABLE comment(
    comment_id      INTEGER       GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    message         visibility    NOT NULL,
    created_at      TIMESTAMP     WITH TIME ZONE NOT NULL,
    post_id         INTEGER       NOT NULL,
    author_id       INTEGER       NOT NULL 
);
ALTER TABLE comment ADD CONSTRAINT pk_comment PRIMARY KEY (comment_id);
ALTER TABLE comment ADD CONSTRAINT fk_comment_post_id FOREIGN KEY (post_id) REFERENCES post;
ALTER TABLE comment ADD CONSTRAINT fk_comment_user_id FOREIGN KEY (author_id) REFERENCES users;


CREATE TABLE likes(
    like_id         INTEGER       GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    post_id         INTEGER       NOT NULL,
    user_id         INTEGER       NOT NULL,
    created_at      TIMESTAMP     DEFAULT CURRENT_TIMESTAMP NOT NULL
);
ALTER TABLE likes ADD CONSTRAINT pk_like PRIMARY KEY (like_id);
ALTER TABLE likes ADD CONSTRAINT fk_like_post_id FOREIGN KEY (post_id) references post;
ALTER TABLE likes ADD CONSTRAINT fk_like_user_id FOREIGN KEY (user_id) references users;
ALTER TABLE likes ADD CONSTRAINT unique_post_user UNIQUE(post_id, user_id);


CREATE TABLE situations(
   situation_id     INTEGER       GENERATED BY DEFAULT AS IDENTITY NOT NULL,
   description      VARCHAR       NOT NULL
);
ALTER TABLE situations ADD CONSTRAINT pk_situations PRIMARY KEY (situation_id);
ALTER TABLE situations ADD CONSTRAINT unique_description UNIQUE (description);


CREATE TABLE friendships(
    friendship_id   INTEGER       GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    status          INTEGER       NOT NULL,
    requester_id    INTEGER       NOT NULL,
    accepter_id     INTEGER       NOT NULL,
    created_at      TIMESTAMP     DEFAULT CURRENT_TIMESTAMP NOT NULL
);
ALTER TABLE friendships ADD CONSTRAINT pk_friendships PRIMARY KEY (friendship_id);
ALTER TABLE friendships ADD CONSTRAINT fk_friendships_requester_id FOREIGN KEY (requester_id) references users;
ALTER TABLE friendships ADD CONSTRAINT fk_friendships_accepter_id FOREIGN KEY (accepter_id) references users;
ALTER TABLE friendships ADD CONSTRAINT fk_friendships_status FOREIGN KEY (status) REFERENCES situations;
ALTER TABLE friendships ADD CONSTRAINT unique_friendship UNIQUE(requester_id, accepter_id);


INSERT INTO
    situations (description)
VALUES
    ('ACCEPTED'),
    ('BLOCKED'),
    ('PENDING'),
    ('REJECTED');
